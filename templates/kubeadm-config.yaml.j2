apiVersion: kubeadm.k8s.io/v1beta3
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: "{{ hostvars[groups['masters'][0]].kubetoken }}"
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
certificateKey: "{{ hostvars[groups['masters'][0]].kubecertkey }}"
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: "{{ hostvars[inventory_hostname].host_ip }}"
  bindPort: 6443
nodeRegistration:
  imagePullPolicy: Always
  name: "{{ hostvars[inventory_hostname].host_fqdn }}"
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/control-plane
---
apiServer:
{% if k8s.network.additional_san is defined and k8s.network.additional_san != '' %}
  certSANs:
    - "{{ k8s.network.additional_san | default('localhost') }}"
{% endif %}
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta3
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManager: {}
{% if k8s.control_plane.vms > 1  %}
controlPlaneEndpoint: "{{ hostvars[groups['loadbalancer'][0]].host_fqdn }}"
{% endif %}
dns: {}
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: "{{ 'registry.k8s.io' if k8s.cluster_version is version('1.25', '>=') else 'k8s.gcr.io' }}"
kind: ClusterConfiguration
kubernetesVersion: v{{ k8s.cluster_version }}.{{ '14' if k8s.cluster_version is version('1.21', '==') else '17' if k8s.cluster_version is version('1.22', '==') else '15' if k8s.cluster_version is version('1.23', '==') else '9' if k8s.cluster_version is version('1.24', '==') else '5' if k8s.cluster_version is version('1.25', '==') else '0' if k8s.cluster_version is version('1.26', '==') }}
networking:
  dnsDomain: cluster.local
  podSubnet: "{{ ('10.244.0.0/16' if (k8s.network.cni_plugin == 'flannel') else k8s.network.pod_cidr) }}"
  serviceSubnet: "{{ k8s.network.service_cidr }}"
scheduler: {}